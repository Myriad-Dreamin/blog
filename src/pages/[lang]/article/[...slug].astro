---
import { render } from "astro:content";
import { type CollectionEntry, getCollection } from "astro:content";

import BlogPost from "$layouts/BlogPost.astro";
import { published } from "$content";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const postsZh = new Map(
    (await getCollection("blog-zh")).filter(published).map((p) => [p.id, p])
  );
  const postsEn = new Map(
    (await getCollection("blog-en")).filter(published).map((p) => [p.id, p])
  );

  return [
    ...posts.map((post) => ({
      params: { lang: "zh", slug: post.id },
      props: {
        canonical: post,
        specific: postsZh.get(post.id),
      },
    })),
    ...posts.map((post) => ({
      params: { lang: "en", slug: post.id },
      props: {
        canonical: post,
        specific: postsEn.get(post.id),
      },
    })),
  ];
}
type Props = {
  canonical: CollectionEntry<"blog">;
  specific: CollectionEntry<"blog"> | undefined;
};

const postAll = Astro.props;
const post = postAll.specific || postAll.canonical;
//todo: remove this hack
const canonical = Astro.url.pathname.replace(/\/(zh|en)\//, "/");
const { Content } = await render(post);
---

<BlogPost {...{ id: post.id, breadcrumbs: "Posts", canonical }} {...post.data}>
  <Content />
</BlogPost>
