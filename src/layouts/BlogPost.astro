---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

import { TagList, renderComment } from "@myriaddreamin/tylant";

import {
  ArchiveRef,
  BaseHead,
  CommentList,
  Footer,
  FormattedDate,
  Header,
  LikeReaction,
  PostClick,
} from "$components";
import {
  kEnableClick,
  kArticleStats,
  kEnableReaction,
  kCommentInfo,
  kUrlBase,
} from "$consts";
import { formatLang, getPostLocaleInfo } from "$components/locale";
import LocaleMessage from "$components/LocaleMessage.astro";

interface IdExt {
  id: string;
}

type Props = CollectionEntry<"blog">["data"] &
  (IdExt | { id: false }) & {
    canonical?: string;
    breadcrumbs: string;
  };

const {
  id,
  title,
  description,
  date,
  updatedDate,
  tags,
  author,
  breadcrumbs,
  canonical,
  lang,
  region,
  ...rest
} = Astro.props;
const stat: { like?: number; click?: number } =
  ((kEnableClick || kEnableReaction) &&
    kArticleStats.find((stat) => stat.id === id)) ||
  {};
const click = stat.click || 0;
const like = stat.like || 0;
const pdfArchives = await getCollection("archive");

const htmlLang = formatLang(lang, region);
const explicitLang =
  lang == "en" && !Astro.url.pathname.includes("/en/") ? undefined : lang;
const localeInfo = id && getPostLocaleInfo(id);
---

<html lang={htmlLang}>
  <head>
    <BaseHead title={title} description={description} canonical={canonical} />
    <style is:global>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }
      .prose,
      .comment-region,
      ul.tags {
        max-width: min(56rem, calc(100% - 2em));
        color: var(--main-color);
        margin: auto;
      }
      .prose {
        padding: 1em;
      }
      .prose p {
        margin-block-start: 0.5em;
        margin-block-end: 0.5em;
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        line-height: 1;
      }
      .outline {
        margin-top: -2em;
      }
      .outline + hr {
        margin-bottom: 1em;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .annotation {
        color: var(--gray-color);
        display: flex;
        gap: 0.5em;
        margin-bottom: 0.5em;
      }
      .last-updated-on,
      .click-count,
      .like-count {
        font-style: italic;
      }
      ul.tags {
        list-style: none;
        padding: 0;
      }
      .tags li {
        display: inline-block;
        margin: 0;
        margin-right: 1em;
      }
      .tags a {
        text-decoration: none;
      }
      .tags a:hover {
        text-decoration: underline;
      }
      .outline {
        text-align: left;
      }

      .outline-item {
        line-height: 1.8889;
      }
      .outline-item.x-heading-1 {
        margin-left: 0em;
      }
      .outline-item.x-heading-2 {
        margin-left: 1em;
      }
      .outline-item.x-heading-3 {
        margin-left: 2em;
      }
      .outline-item.x-heading-4 {
        margin-left: 3em;
      }
      .outline-item.x-heading-5 {
        margin-left: 4em;
      }
    </style>
    {id && <PostClick articleId={id} />}
  </head>

  <body>
    <Header articleId={id || undefined} breadcrumbs={breadcrumbs} />
    <main>
      <article>
        <div class="prose">
          <section class="title" aria-label="Title">
            <div class="annotation">
              <div class="date">
                <FormattedDate date={date} />
                {
                  updatedDate && (
                    <>
                      <span class="last-updated-on">
                        , Last updated on{" "}
                        <FormattedDate date={updatedDate || date} />
                      </span>
                    </>
                  )
                }
              </div>
              {
                id && kEnableClick && (
                  <>
                    <span>·</span>
                    <div class="click-count">
                      {click} {click === 1 ? "view" : "views"}
                    </div>
                  </>
                )
              }
              {
                id && kEnableReaction && (
                  <>
                    <span>·</span>
                    <span class="like-count">
                      {like} {like === 1 ? "like" : "likes"}
                    </span>
                  </>
                )
              }
              {
                id && kEnableReaction && (
                  <>
                    <span>·</span>
                    <LikeReaction articleId={id} />
                  </>
                )
              }
            </div>
            <h1>{title}</h1>
            {
              localeInfo && (
                <LocaleMessage
                  articleId={id}
                  lang={lang || "en"}
                  localeInfo={localeInfo}
                />
              )
            }
            {
              id && pdfArchives.length > 0 && (
                <ArchiveRef
                  articleId={id || undefined}
                  pdfArchives={pdfArchives}
                  {...rest}
                />
              )
            }
            <hr />
          </section>
          <slot />
        </div>
      </article>
      {
        tags && (
          <TagList
            baseUrl={`${kUrlBase}/${explicitLang ? explicitLang + "/" : ""}article`}
            tags={tags}
          />
        )
      }
      {
        id && (
          <CommentList
            articleId={id}
            kCommentInfo={kCommentInfo}
            renderComment={renderComment}
          />
        )
      }
    </main>
    <Footer />
  </body>
</html>
